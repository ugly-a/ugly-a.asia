<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cookie,Web Storage,VueX存档</title>
    <link href="/2022/07/06/VueX/"/>
    <url>/2022/07/06/VueX/</url>
    
    <content type="html"><![CDATA[<h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h3><p>客户端浏览器存储数据都是通过cookie来实现的。cookie因其自身的特性，在一些方面有其独有的优势，比如可配置过期时间、可跨域共享（具有相同祖先域名时）、与服务器数据交互等，但在做数据存储方面，其缺点显而易见：</p><ul><li>客户端发送请求时，cookie会作为头部将无用数据一起发送给服务器</li><li>请求被拦截后，cookie数据有泄漏和被篡改的安全风险</li><li>cookie存储数据的大小被限制在4K。IE8、Firefox、opera每个域对cookie的数量也有限制，上限是50，Safari&#x2F;WebKit没有限制。</li></ul><p>以下是获取和设置cookie的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 根据name获取cookie</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getCookie</span>(<span class="hljs-params">name</span>) &#123;<br>  <span class="hljs-keyword">if</span> (<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-property">length</span> &gt; <span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> c_start = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(name + <span class="hljs-string">&quot;=&quot;</span>);<br>    <span class="hljs-keyword">if</span> (c_start != -<span class="hljs-number">1</span>) &#123;<br>      c_start = c_start + name.<span class="hljs-property">length</span> + <span class="hljs-number">1</span>;<br>      <span class="hljs-keyword">let</span> c_end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&quot;;&quot;</span>, c_start);<br>      <span class="hljs-keyword">if</span> (c_end == -<span class="hljs-number">1</span>) c_end = <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-property">length</span>;<br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">unescape</span>(<span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span>.<span class="hljs-title function_">substring</span>(c_start, c_end));<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><br>&#125;<br><span class="hljs-comment">// 设置cookie，name/value为名和值，params为参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, params = &#123;&#125;</span>) &#123;<br>  <span class="hljs-keyword">let</span> &#123; expires, ...args &#125; = params;<br>  <span class="hljs-keyword">if</span> (expires) &#123;<br>    <span class="hljs-keyword">const</span> date = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    expires = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(date.<span class="hljs-title function_">setDate</span>(date.<span class="hljs-title function_">getDate</span>() + expires)).<span class="hljs-title function_">toGMTString</span>();<br>  &#125;<br>  <span class="hljs-keyword">let</span> cookie = <span class="hljs-string">`<span class="hljs-subst">$&#123;name&#125;</span>=<span class="hljs-subst">$&#123;<span class="hljs-built_in">escape</span>(value)&#125;</span>;expires=<span class="hljs-subst">$&#123;expires&#125;</span>`</span>;<br>  <span class="hljs-title class_">Object</span>.<span class="hljs-title function_">keys</span>(args).<span class="hljs-title function_">forEach</span>(<span class="hljs-function"><span class="hljs-params">key</span> =&gt;</span> &#123;<br>    cookie += <span class="hljs-string">`;<span class="hljs-subst">$&#123;key&#125;</span>=<span class="hljs-subst">$&#123;args[key]&#125;</span>`</span>;<br>  &#125;);<br>  <span class="hljs-variable language_">document</span>.<span class="hljs-property">cookie</span> = cookie;<br>&#125;<br></code></pre></td></tr></table></figure><p>因此cookie不适合做大数据量的存储，相比之下，Web Storage更适合存储大量数据:</p><h3 id="2-Web-Storage"><a href="#2-Web-Storage" class="headerlink" title="2. Web Storage"></a>2. Web Storage</h3><p>每个域名下可提供5M的存储容量（不同浏览器可能有差异，比如IE是10M）<br>以key&#x2F;value键值对的方式存储字符串，方便数据存取操作<br>只存储在客户端本地，不会随请求发送给服务端<br>Web Storage分为两种，即sessionStorage和localStorage，<br>两种对象的使用方法和api基本相同：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs awk">const storage = sessionStorage || localStorage;<br><span class="hljs-regexp">//</span> 设置xxx的值为<span class="hljs-string">&#x27;yyy&#x27;</span><br>storage.setItem(<span class="hljs-string">&#x27;xxx&#x27;</span>, <span class="hljs-string">&#x27;yyy&#x27;</span>);<br><span class="hljs-regexp">//</span> 获取xxx的值<br>storage.getItem(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br><span class="hljs-regexp">//</span> 删除xxx及其值<br>storage.removeItem(<span class="hljs-string">&#x27;xxx&#x27;</span>);<br><span class="hljs-regexp">//</span> 获取键值对的数量<br>storage.length;<br><span class="hljs-regexp">//</span> 清空所有值<br>storage.clear();<br></code></pre></td></tr></table></figure><p>以下是sessionStorage和localStorage之间的区别：</p><p>sessionStorage 为每一个给定的源（given origin）维持一个独立的存储区域，该存储区域在页面会话期间可用（即只要浏览器处于打开状态，包括页面重新加载和恢复）。<br>localStorage 同样的功能，但是在浏览器关闭，然后重新打开后数据仍然存在。</p><h3 id="3-VueX"><a href="#3-VueX" class="headerlink" title="3. VueX"></a>3. VueX</h3><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p><h4 id="3-1-State"><a href="#3-1-State" class="headerlink" title="3.1 State"></a>3.1 State</h4><p>用一个对象就包含了全部的应用层级状态。至此它便作为一个“唯一数据源 (SSOT)”而存在。</p><p>State提供唯一公共数据源，所有共享数据统一放置Store的State中存储（通常项目中state[本质是一个对象]放在store文件夹之中）</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pf">//创建store数据源，<br><span class="hljs-keyword">const</span> store = new Vuex.Store(&#123;<br>    <span class="hljs-keyword">state</span>:&#123;count:<span class="hljs-number">0</span>&#125;<br>&#125;)<br>//或者<br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>    <span class="hljs-keyword">state</span>:&#123;count:<span class="hljs-number">0</span>&#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>组件访问State数据方式：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br><br>this.<span class="hljs-variable">$store</span>.state.全局数据名称<br><br><span class="hljs-regexp">//</span>在template当中使用可以省略this<br><br><span class="hljs-regexp">//</span>-------------------------------<br><span class="hljs-regexp">//</span>第二种方式<br>&lt;template&gt;<br>    &lt;h1&gt;<br>        &#123;&#123;count&#125;&#125;<br>    &lt;/h1&gt;<br>&lt;/template&gt;<br><br><br>&lt;script&gt;<br>    import &#123; mapState &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br>    <br>    export default &#123;<br>        data()&#123;<br>            return &#123;&#125;<br>        &#125;,<br>        computed:&#123;<br>            ...mapState([<span class="hljs-string">&#x27;count&#x27;</span>])<br>            <span class="hljs-regexp">//</span> 映射 this.count 为 store.state.count<br>            <span class="hljs-regexp">//</span>...对象展开运算符：将此对象混入到外部对象中。<br>            <span class="hljs-regexp">//</span>详细说明：https:<span class="hljs-regexp">//</span>blog.csdn.net<span class="hljs-regexp">/weixin_41642136/</span>article<span class="hljs-regexp">/details/</span><span class="hljs-number">111666448</span><br>        &#125;<br>    &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><h4 id="3-2-Getter"><a href="#3-2-Getter" class="headerlink" title="3.2 Getter"></a>3.2 Getter</h4><p>Getter用于对Store数据加工处理，相当于Vue的计算属性的功能。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    todos: [<br>      &#123; id: <span class="hljs-number">1</span>, text: &#x27;...&#x27;, done: true &#125;,<br>      &#123; id: <span class="hljs-number">2</span>, text: &#x27;...&#x27;, done: false &#125;<br>    ],<br>    count:<span class="hljs-number">0</span><br>  &#125;,<br>  getters: &#123;<br>    showNum:<span class="hljs-keyword">state</span>=&gt;&#123;<br>        return &#x27;当前最新数据是[&#x27;+<span class="hljs-keyword">state</span>.count+&#x27;]&#x27;<br>    &#125;,<br>    <br>    doneTodos (<span class="hljs-keyword">state</span>) &#123;<br>      return <span class="hljs-keyword">state</span>.todos.filter(todo =&gt; todo.done)<br>    &#125;,<br>    <br>    getTodoById: (<span class="hljs-keyword">state</span>) =&gt; (id) =&gt; &#123;<br>    return <span class="hljs-keyword">state</span>.todos.find(todo =&gt; todo.id === id)<br>    &#125;,<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>访问getters：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br><br>this.<span class="hljs-variable">$store</span>.getters.showNum<br>this.<span class="hljs-variable">$store</span>.getters.doneTodos<br>this.<span class="hljs-variable">$store</span>.getters.getTodoById(<span class="hljs-number">2</span>)<br><br><span class="hljs-regexp">//</span>第二种<br><br>import &#123; mapGetters &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>export default &#123;<br><br>  ...<br>  <br>  computed: &#123;<br>  <span class="hljs-regexp">//</span> 使用对象展开运算符将 getter 混入 computed 对象中<br>    ...mapGetters([<br>      <span class="hljs-string">&#x27;doneTodosCount&#x27;</span>,<br>      <span class="hljs-string">&#x27;anotherGetter&#x27;</span>,<br>    ])<br>    <br>    ...mapGetters(&#123;<br>    <span class="hljs-regexp">//</span> 把 `this.doneCount` 映射为 `this.<span class="hljs-variable">$store</span>.getters.doneTodosCount`<br>    doneCount: <span class="hljs-string">&#x27;doneTodosCount&#x27;</span><br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-3-Murtation"><a href="#3-3-Murtation" class="headerlink" title="3.3 Murtation"></a>3.3 Murtation</h4><p>Murtation：一般用于变更Store当中的数据</p><p>store当中不可在js代码当中直接用<code>this.$store.state.全局数据名称</code>去修改数据，<br>Vuex提供一种修改的 store 中的状态的唯一方法是提交 mutation。</p><p>每个 mutation 都有一个字符串的事件类型 (type)和一个回调函数 (handler)。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs pf">//定义mutations<br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;,<br>  mutations: &#123;<br>    increment_1 (<span class="hljs-keyword">state</span>) &#123;<br>      // 变更状态<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;,<br>    increment_2 (<span class="hljs-keyword">state</span>, payload) &#123;<br>    <span class="hljs-keyword">state</span>.count += payload.amount<br>    &#125;<br>    <br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>访问mutations</strong>：</p><p>1.使用&#x3D;&#x3D;this.$store,commit()&#x3D;&#x3D;</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">methods:&#123;<br>    函数名()&#123;<br>        <span class="hljs-keyword">this</span>.$store,commit(<span class="hljs-string">&#x27;increment_1&#x27;</span>)<br>        <br>        <span class="hljs-keyword">this</span>.$store.commit(<span class="hljs-string">&#x27;increment_2&#x27;</span>, &#123;amount: <span class="hljs-number">10</span>&#125;)<br>        <br>        <span class="hljs-keyword">this</span>.$store.commit(&#123;type: <span class="hljs-string">&#x27;increment&#x27;</span>,amount: <span class="hljs-number">10</span>&#125;)<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>2.使用mapMutations</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-comment">//1.从VueX种按需导入mapMutations函数</span><br><span class="hljs-keyword">import</span> &#123; mapMutations &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vuex&#x27;</span><br></code></pre></td></tr></table></figure><p>使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css">//<span class="hljs-number">2</span>.将指定的mutations函数，映射未当前组件methods<br>methods:&#123;<br>    ..<span class="hljs-selector-class">.mapMutations</span>(<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;increment_1&#x27;</span>]</span>,<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;increment_2&#x27;</span>]</span>)<br>    <br>    ..<span class="hljs-selector-class">.mapMutations</span>(&#123;<br>      add: <span class="hljs-string">&#x27;increment&#x27;</span> // 将 `this.<span class="hljs-built_in">add</span>()` 映射为 `this.$store.<span class="hljs-built_in">commit</span>(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br>    &#125;)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-4-Action"><a href="#3-4-Action" class="headerlink" title="3.4 Action"></a>3.4 Action</h4><p>Action用于处理异步任务，通过触发Mutation的方式间接变更数据。</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  <span class="hljs-keyword">state</span>: &#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;,<br>  mutations: &#123;<br>    increment (<span class="hljs-keyword">state</span>) &#123;<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;<br>  &#125;,<br>  actions: &#123;<br>    increment (context) &#123;<br>        <span class="hljs-built_in">set</span>Timeout((=&gt;&#123;<br>            context.commit(&#x27;increment&#x27;)<br>        &#125;,<span class="hljs-number">1000</span>)<br>    &#125;<br>  &#125;,<br>  //实践中，我们会经常用到 ES2015的参数解构来简化代码（特别是我们需要调用 commit 很多次的时候）：<br>  <br>  actions: &#123;<br>  increment (&#123; commit &#125;) &#123;<br>    commit(&#x27;increment&#x27;)<br>  &#125;<br>&#125;<br>  <br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>触发Action：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>第一种<br>methods:&#123;<br>    函数名()&#123;<br>        this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)<br>        <span class="hljs-regexp">//</span> 以载荷形式分发<br>        this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;incrementAsync&#x27;</span>, &#123;<br>                amount: <span class="hljs-number">10</span><br>            &#125;)<br><br>        <span class="hljs-regexp">//</span> 以对象形式分发<br>        this.<span class="hljs-variable">$store</span>.dispatch(&#123;<br>            type: <span class="hljs-string">&#x27;incrementAsync&#x27;</span>,<br>            amount: <span class="hljs-number">10</span><br>            &#125;)<br>    &#125;<br>&#125;<br><span class="hljs-regexp">//</span>第二种<br>import &#123; mapActions &#125; from <span class="hljs-string">&#x27;vuex&#x27;</span><br><br>export default &#123;<br>  <span class="hljs-regexp">//</span> ...<br>  methods: &#123;<br>    ...mapActions([<br>      <span class="hljs-string">&#x27;increment&#x27;</span>, <span class="hljs-regexp">//</span> 将 `this.increment()` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br><br>      <span class="hljs-regexp">//</span> `mapActions` 也支持载荷：<br>      <span class="hljs-string">&#x27;incrementBy&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.incrementBy(amount)` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;incrementBy&#x27;</span>, amount)`<br>    ]),<br>    ...mapActions(&#123;<br>      add: <span class="hljs-string">&#x27;increment&#x27;</span> <span class="hljs-regexp">//</span> 将 `this.add()` 映射为 `this.<span class="hljs-variable">$store</span>.dispatch(<span class="hljs-string">&#x27;increment&#x27;</span>)`<br>    &#125;)<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-5-Module"><a href="#3-5-Module" class="headerlink" title="3.5 Module"></a>3.5 Module</h4><p>Vuex 允许我们将 store分割成模块(module)，每个模块拥有自己的state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：</p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123; ... &#125;),<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;,<br>  getters: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> moduleB = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123; ... &#125;),<br>  mutations: &#123; ... &#125;,<br>  actions: &#123; ... &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> store = createStore(&#123;<br>  modules: &#123;<br>    a: moduleA,<br>    b: moduleB<br>  &#125;<br>&#125;)<br><br>store.<span class="hljs-keyword">state</span>.a // -&gt; moduleA 的状态<br>store.<span class="hljs-keyword">state</span>.b // -&gt; moduleB 的状态<br></code></pre></td></tr></table></figure><p><strong>模块局部状态</strong></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pf"><span class="hljs-keyword">const</span> moduleA = &#123;<br>  <span class="hljs-keyword">state</span>: () =&gt; (&#123;<br>    count: <span class="hljs-number">0</span><br>  &#125;),<br>  <br>  mutations: &#123;<br>    increment (<span class="hljs-keyword">state</span>) &#123;<br>    <br>      // 这里的 `<span class="hljs-keyword">state</span>` 对象是模块的局部状态<br>      <span class="hljs-keyword">state</span>.count++<br>    &#125;<br>  &#125;,<br>  <br>  getters: &#123;<br>  <br>    doubleCount (<span class="hljs-keyword">state</span>) &#123;<br>      return <span class="hljs-keyword">state</span>.count * <span class="hljs-number">2</span><br>    &#125;,<br>    <br>    //对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：<br>    <br>    sumWithRootCount (<span class="hljs-keyword">state</span>, getters, rootState) &#123;<br>      return <span class="hljs-keyword">state</span>.count + rootState.count<br>    &#125;<br>    <br>  &#125;,<br>  <br>  actions: &#123;<br>  //对于模块内部的 action，局部状态通过 context.<span class="hljs-keyword">state</span> 暴露出来，根节点状态则为 context.rootState：<br>  <br>    incrementIfOddOnRootSum (&#123; <span class="hljs-keyword">state</span>, commit, rootState &#125;) &#123;<br>      if ((<span class="hljs-keyword">state</span>.count + rootState.count) % <span class="hljs-number">2</span> === <span class="hljs-number">1</span>) &#123;<br>        commit(&#x27;increment&#x27;)<br>      &#125;<br>    &#125;<br>    <br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>命名空间</strong></p><p>启用了命名空间的 getter 和 action 会收到局部化的 getter，dispatch 和 commit。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。更改 namespaced 属性后不需要修改模块内的代码。</p><p>如果希望你的模块具有更高的封装度和复用性，你可以通过添加 namespaced: true 的方式使其成为带命名空间的模块。当模块被注册后，它的所有 getter、action 及 mutation 都会自动根据模块注册的路径调整命名。例如：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs awk">const store = createStore(&#123;<br>  modules: &#123;<br>    account: &#123;<br>      namespaced: true,<span class="hljs-regexp">//</span>开启命名空间<br><br>      <span class="hljs-regexp">//</span> 模块内容（module assets）<br>      state: () =&gt; (&#123; ... &#125;), <span class="hljs-regexp">//</span> 模块内的状态已经是嵌套的了，使用 `namespaced` 属性不会对其产生影响<br>      getters: &#123;<br>        isAdmin () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/isAdmin&#x27;</span>]<br>      &#125;,<br>      actions: &#123;<br>        login () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; dispatch(<span class="hljs-string">&#x27;account/login&#x27;</span>)<br>      &#125;,<br>      mutations: &#123;<br>        login () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; commit(<span class="hljs-string">&#x27;account/login&#x27;</span>)<br>      &#125;,<br><br>      <span class="hljs-regexp">//</span> 嵌套模块<br>      modules: &#123;<br>        <span class="hljs-regexp">//</span> 继承父模块的命名空间<br>        myPage: &#123;<br>          state: () =&gt; (&#123; ... &#125;),<br>          getters: &#123;<br>            profile () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/profile&#x27;</span>]<br>          &#125;<br>        &#125;,<br><br>        <span class="hljs-regexp">//</span> 进一步嵌套命名空间<br>        posts: &#123;<br>          namespaced: true,<br><br>          state: () =&gt; (&#123; ... &#125;),<br>          getters: &#123;<br>            popular () &#123; ... &#125; <span class="hljs-regexp">//</span> -&gt; getters[<span class="hljs-string">&#x27;account/posts/popular&#x27;</span>]<br>          &#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;)<br></code></pre></td></tr></table></figure><p>带命名空间模块访问全局内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs awk">modules: &#123;<br>  foo: &#123;<br>    namespaced: true,<br><br>    getters: &#123;<br>    <br>      <span class="hljs-regexp">//</span> 在这个模块的 getter 中，`getters` 被局部化了<br>      <span class="hljs-regexp">//</span> 你可以使用 getter 的第四个参数来调用 `rootGetters`<br>      <br>      someGetter (state, getters, rootState, rootGetters) &#123;<br>        getters.someOtherGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someOtherGetter&#x27;</span><br>        rootGetters.someOtherGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someOtherGetter&#x27;</span><br>        rootGetters[<span class="hljs-string">&#x27;bar/someOtherGetter&#x27;</span>] <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;bar/someOtherGetter&#x27;</span><br>      &#125;,<br>      someOtherGetter: state =&gt; &#123; ... &#125;<br>    &#125;,<br><br>    actions: &#123;<br>    <br>      <span class="hljs-regexp">//</span> 在这个模块中， dispatch 和 commit 也被局部化了<br>      <span class="hljs-regexp">//</span> 他们可以接受 `root` 属性以访问根 dispatch 或 commit<br>      <br>      <br>      someAction (&#123; dispatch, commit, getters, rootGetters &#125;) &#123;<br>        getters.someGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someGetter&#x27;</span><br>        rootGetters.someGetter <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someGetter&#x27;</span><br>        rootGetters[<span class="hljs-string">&#x27;bar/someGetter&#x27;</span>] <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;bar/someGetter&#x27;</span><br><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someOtherAction&#x27;</span><br>        dispatch(<span class="hljs-string">&#x27;someOtherAction&#x27;</span>, null, &#123; root: true &#125;) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someOtherAction&#x27;</span><br><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;foo/someMutation&#x27;</span><br>        commit(<span class="hljs-string">&#x27;someMutation&#x27;</span>, null, &#123; root: true &#125;) <span class="hljs-regexp">//</span> -&gt; <span class="hljs-string">&#x27;someMutation&#x27;</span><br>      &#125;,<br>      someOtherAction (ctx, payload) &#123; ... &#125;<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-6-一些注意事项"><a href="#3-6-一些注意事项" class="headerlink" title="3.6 一些注意事项"></a>3.6 一些注意事项</h4><p><strong>1.store当中不可在js代码当中直接用<code>this.$store.state.全局数据名称</code>去修改state数据。</strong></p><p><strong>2.不要在mutations函数当中直接执行异步操作，例如：<code>setTimeout(()=&gt;&#123;...&#125;,100)</code></strong></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Python+selenium爬取b站Top100数据</title>
    <link href="/2022/07/03/Python/"/>
    <url>/2022/07/03/Python/</url>
    
    <content type="html"><![CDATA[<h2 id="1-selenium库"><a href="#1-selenium库" class="headerlink" title="1.selenium库"></a>1.selenium库</h2><p>Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成.Net、Java、Perl等不同语言的测试脚本。</p><h2 id="2-selenium库的安装"><a href="#2-selenium库的安装" class="headerlink" title="2.selenium库的安装"></a>2.selenium库的安装</h2><p>在python中安装selenium库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip/pip3 install selenium<br></code></pre></td></tr></table></figure><h2 id="3-浏览器的驱动安装"><a href="#3-浏览器的驱动安装" class="headerlink" title="3.浏览器的驱动安装"></a>3.浏览器的驱动安装</h2><p>下载链接：<a href="https://chromedriver.storage.googleapis.com/index.html">浏览器驱动</a><br>我这里使用的是谷歌浏览器，点击链接，找到对应浏览器的相应版本安装，浏览器的设置——关于 可以查询浏览器的版本，下载解压之后得到一个exe文件，放到chrome浏览器的安装目录下即可</p><p>（我的目录路径是C:\Users\丑丑a\Downloads\chromedriver.exe）</p><p>测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br>driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/v/popular/rank/all&quot;</span>)<br></code></pre></td></tr></table></figure><p>若能自动打开浏览器，即安装成功。</p><h3 id="4-完整代码"><a href="#4-完整代码" class="headerlink" title="4.完整代码"></a>4.完整代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs bash">from selenium import webdriver<br>import time<br>import pandas as pd<br><br>def main():<br>    driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>    <span class="hljs-comment"># 声明爬取网站</span><br>    driver.get(<span class="hljs-string">&quot;https://www.bilibili.com/v/popular/rank/all&quot;</span>)<br><br>    Order = []  <span class="hljs-comment"># 榜单次序</span><br>    Title = []  <span class="hljs-comment"># 视频标题</span><br>    Up = []     <span class="hljs-comment"># 视频Up主</span><br>    Click = []   <span class="hljs-comment"># 视频点击量</span><br>    View = []   <span class="hljs-comment"># 视频评价数</span><br>    Link = []   <span class="hljs-comment"># 视频链接</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;/html/body/div/div/div/div/ul/li/div/div/i/span&quot;</span>):<br>        Order.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//div/ul/li/div/div/a&quot;</span>):<br>        <span class="hljs-keyword">if</span>(i.text != <span class="hljs-string">&quot;&quot;</span>):<br>            Title.append(i.text)<br>            <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/a/span&quot;</span>):<br>        Up.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/div/span[1]&quot;</span>):<br>        Click.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&quot;//*[@id=&#x27;app&#x27;]/div/div/div/ul/li/div/div/div/div/span[2]&quot;</span>):<br>        View.append(i.text)<br>        <span class="hljs-comment"># print(i.text)</span><br><br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">link</span> <span class="hljs-keyword">in</span> driver.find_elements_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;app&quot;]/div/div/div/ul/li/div/div[2]/a&#x27;</span>):<br>        a = link.get_attribute(<span class="hljs-string">&#x27;href&#x27;</span>)<br>        Link.append(a)<br>        <span class="hljs-comment"># print(a)</span><br><br>    data1 = [Order, Title, Up, Click, View, Link]<br>    data2 = each_Data(Link)<br><br>    saveData(data1, data2)  <span class="hljs-comment"># 保存数据</span><br>    driver.quit()  <span class="hljs-comment"># 关闭浏览器</span><br><br>def saveData(data1, data2):<br>    result =&#123;<br>        <span class="hljs-string">&quot;序号&quot;</span>: data1[0],<br>        <span class="hljs-string">&quot;标题&quot;</span>: data1[1],<br>        <span class="hljs-string">&quot;Up主&quot;</span>: data1[2],<br>        <span class="hljs-string">&quot;播放量&quot;</span>: data1[3],<br>        <span class="hljs-string">&quot;评论数&quot;</span>: data1[4],<br>        <span class="hljs-string">&quot;视频链接&quot;</span>: data1[5],<br>        <span class="hljs-string">&quot;点赞数&quot;</span>: data2[0],<br>        <span class="hljs-string">&quot;投币数&quot;</span>: data2[1],<br>        <span class="hljs-string">&quot;收藏数&quot;</span>: data2[2],<br>        <span class="hljs-string">&quot;转发数&quot;</span>: data2[3]<br>    &#125;<br>    <span class="hljs-comment"># 导入数据</span><br>    <span class="hljs-built_in">df</span> = pd.DataFrame(result)<br>    <span class="hljs-comment"># 获取时间</span><br>    now = time.localtime()<br>    now = time.strftime(<span class="hljs-string">&quot;%Y-%m-%d-%H-%M&quot;</span>, now)<br>    <span class="hljs-comment"># 声明文件名称</span><br>    csv_name=<span class="hljs-string">&quot;BilibiliTop100&quot;</span>+now+<span class="hljs-string">&quot;.csv&quot;</span><br>    df.to_csv(csv_name, encoding=<span class="hljs-string">&quot;utf_8_sig&quot;</span>)<br><br>def each_Data(Link):<br>    Like = []   <span class="hljs-comment"># 点赞数</span><br>    Coin = []   <span class="hljs-comment"># 投币数</span><br>    Collect = []    <span class="hljs-comment"># 收藏数</span><br>    Share = []  <span class="hljs-comment"># 转发数</span><br>    driver = webdriver.Chrome(executable_path=r<span class="hljs-string">&quot;C:\Users\丑丑a\Downloads\chromedriver.exe&quot;</span>)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(0,100):<br>        <span class="hljs-comment"># 声明爬取网站</span><br>        driver.get(Link[i])<br><br>        like = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[1]&#x27;</span>)<br>        like = like.text<br><br>        coin = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[2]&#x27;</span>)<br>        coin = coin.text<br><br>        collect = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[3]&#x27;</span>)<br>        collect = collect.text<br><br>        share = driver.find_element_by_xpath(<span class="hljs-string">&#x27;//*[@id=&quot;arc_toolbar_report&quot;]/div[1]/span[4]&#x27;</span>)<br>        share = share.text<br>        Like.append(like)<br>        Coin.append(coin)<br>        Collect.append(collect)<br>        Share.append(share)<br><br>    data = [Like, Coin, Collect, Share]<br>    <span class="hljs-comment"># print(data)</span><br>    driver.quit()<br>    <span class="hljs-built_in">return</span> data<br><br><span class="hljs-keyword">if</span> __name__ ==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>结果：<br><img src="/./img/reslut.png" alt="result"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>如何配置Gitee与Github在同一Git环境</title>
    <link href="/2022/07/03/Git/"/>
    <url>/2022/07/03/Git/</url>
    
    <content type="html"><![CDATA[<h3 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h3><p>每次用Github的HTTP传博客代码都很慢，因为GitHub毕竟是境外的，所以为了解决GitHub上传代码慢，网站老是进不去的问题，可以利用国内的<a href="https://gitee.com/">码云Gitee网站</a>进行代码管理。</p><h3 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2.准备工作"></a>2.准备工作</h3><p>首先你得有两个平台的账号，<br><a href="https://github.com/signup/">Github注册</a>，<a href="https://blog.csdn.net/weixin_45738527/article/details/105146064/">GitHub教程</a><br><a href="https://gitee.com/signup/">Gitee注册</a>，<a href="https://gitee.com/help/articles/4113/">Gitee教程</a><br>跟着链接步骤先注册一下吧！</p><h3 id="3-SSH配置"><a href="#3-SSH配置" class="headerlink" title="3.SSH配置"></a>3.SSH配置</h3><h4 id="3-1清除已有git配置"><a href="#3-1清除已有git配置" class="headerlink" title="3.1清除已有git配置"></a>3.1清除已有git配置</h4><p>如果你之前已经安装了git，并且也配置过了全局的user.name和user.email，那么现在就应该全部清除，清除方法如下：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">git config <span class="hljs-params">--global</span> <span class="hljs-params">--unset</span> user.name <span class="hljs-string">&quot;YourName&quot;</span><br>git config <span class="hljs-params">--global</span> <span class="hljs-params">--unset</span> user.email <span class="hljs-string">&quot;YourEmail&quot;</span><br><span class="hljs-string">//</span>注意： 这里的<span class="hljs-string">&quot;YourName&quot;</span>和<span class="hljs-string">&quot;YourEmail&quot;</span>要换成你自己的名称和邮箱<br></code></pre></td></tr></table></figure><h4 id="3-2生成SSH密匙"><a href="#3-2生成SSH密匙" class="headerlink" title="3.2生成SSH密匙"></a>3.2生成SSH密匙</h4><p><a href="https://info.support.huawei.com/info-finder/encyclopedia/zh/SSH.html/">什么是SSH？</a></p><p><strong>如果没有找到ssh文件夹？</strong></p><p>1.打开Git Bash，写上命令：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.name</span> “XXX”<br>git config <span class="hljs-attr">--global</span> user<span class="hljs-selector-class">.email</span> <span class="hljs-string">&quot;XXX@XXX.com&quot;</span><br></code></pre></td></tr></table></figure><p>2.输入如下命令，然后连续按三个回车即可：</p><p><code>ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></p><p>3.然后会出来提示<br><code>Enter file in which to save the key</code> 后面跟着的便是ssh文件夹路径。</p><p><strong>如果已有ssh文件夹</strong></p><p>（１）github密钥<br>进入你的ssh文件夹路径,按住shift再点击鼠标右键，选择powershall打开(或者使用cmd窗口切换到.shh路径)，输入命令：</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autohotkey">`ssh-keygen -t rsa -C <span class="hljs-string">&quot;YourGIthubEmail@mail.com&quot;</span> -f <span class="hljs-string">&quot;github_id_rsa&quot;</span>`<br></code></pre></td></tr></table></figure><p>然后<strong>敲击两次回车</strong>，</p><p>之后运行命令<code>cat github_id_rsa.pub</code>输出文件公钥内容，复制公钥内容并添加到github的设置当中的SSH Keys中保存．</p><p>（２）gitee密钥<br>同样操作，</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ssh-keygen -<span class="hljs-built_in">t</span> rsa -C <span class="hljs-string">&quot;YourGiteeEmail@mail.com&quot;</span> -f <span class="hljs-string">&quot;gitee_id_rsa&quot;</span><br></code></pre></td></tr></table></figure><p>复制公钥gitee_id_rsa.pub公钥的内容，并添加到gitee的SSH Keys中保存．</p><h4 id="3-3创建config文件避免ssh冲突"><a href="#3-3创建config文件避免ssh冲突" class="headerlink" title="3.3创建config文件避免ssh冲突"></a>3.3创建config文件避免ssh冲突</h4><p>在~&#x2F;.ssh文件夹下新建config文件（<strong>注意一定不要添加任何后缀</strong>），用记事本打开后添加以下内容：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-comment"># Gitee</span><br><br>Host gitee.com<br>HostName gitee.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>tee_id_rsa<br><br><span class="hljs-comment"># GitHub</span><br><br>Host github.com<br>HostName github.com<br>PreferredAuthentications publickey<br>IdentityFile ~<span class="hljs-regexp">/.ssh/gi</span>thub_id_rsa<br></code></pre></td></tr></table></figure><p>然后保存后退出右击该文件：<br><strong>属性→安全→高级→禁止继承→删除所有继承→确定</strong></p><h3 id="4测试"><a href="#4测试" class="headerlink" title="4测试"></a>4测试</h3><p>1.执行<code>ssh -T git@github.com</code>，如果返回successfully则github配置成功．<br>2.执行<code>ssh -T git@gitee.com</code>，如果返回successfully则gitee配置成功．</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
